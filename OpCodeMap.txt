This file is linked to Das8086.c.

80x86 OpCode Cheat Sheet.
Notes:
∙	This summary applies to the 16-bit versions of the x86 (what was originally the MCS-86 family)
	and has not been brought up to date for the 32-bit or 64-bit descendants of x86.
∙	Opcodes are listed in octal, because the byte codes for x86 was originally designed this way ―
	the octal format having been inherited from the predecessor MCS-80 family (the 8080/8085 and Z80 clone).
∙	Octal numerals ABC, for 8-bit bytes, have three ‟octits” in the range A ∈ {0,1,2,3}, B,C ∈ {0,1,2,3,4,5,6,7};
	the value denoted by the numeral ABC being A×8² + B×8 + C.
∙	Operations are coded with an opcode byte, and may be followed an address mode byte (with octits ‟xrm”)
	and whatever additional bytes are required by the addressing mode.
∙	The octits xm in xrm are usually used together to determine a memory-based or register-based operand;
	while the octit r may be used to denote a register or an operation.
∙	In one case ― conditionals ― the code is 4-bit.

The following key is used below

Item	│	0	1	2	3
────────┼───────────────────────────────────
Ip	│	inc	dec	push	pop
Dp	│	daa	das	aaa	aas
Fp	│	pushf	popf	sahf	lahf
Lp	│	loopnz	loopz	loop	jcxz

Item	│	0	1	2	3	4	5	6	7
────────┼───────────────────────────────────────────────────────────────────
Rs	│	ES	CS	SS	DS	FS	GS	_	_
Rb	│	AL	CL	DL	BL	AH	CH	DH	BH
Rw	│	AX	CX	DX	BX	SP	BP	SI	DI
Ap	│	add	or	adc	sbb	and	sub	xor	cmp
Sp	│	rol	ror	rcl	rcr	shl	shr	sal	sar
Up	│	_	_	not	neg	mul	imul	div	idiv
Bp	│	clc	stc	cli	sti	cld	std	_	_

CC	│	0	1	2	3	4	5	6	7
────────┼────────────────────────────────────────────────────────────────
c	│	o	no	b	nb	z	nz	be	a

CC	│	8	9	a	b	c	d	e	f
────────┼────────────────────────────────────────────────────────────────
c	│	s	ns	p	np	l	ge	le	g

Addressing mode octits:
∙	For memory-based addresses, the Base is encoded by the octit m.
∙	For register-based addresses, the register is encoded by the octit m, which is denoted as ‟r” below.
∙	For memory-based addresses, the Offset is encoded by the octit x,
	along with 0, 1 or 2 additional bytes following the address mode byte xrm.
∙	The ‟r” in the address mode byte xrm is used separately to denote a register as a second operand or an operation.

xm │	d	Eb/Ew		Conditions	Additional Byte(s)
───┼──────────────────────────────────────────────────────────────
06 │	w	[W]				W (16-bit unsigned integer)
0m │	-	[Base]		m ≠ 6		(None)
1m │	b	[Base+S]			S (8-bit signed integer)
2m │	w	[Base+W]			W (16-bit unsigned integer)
3r │	-	Rb/Rw				(None)
───┼────────────────────────────────────────────────────────────
x0 │	d	[BX+SI+Offset]	x ≠ 3
x1 │	d	[BX+DI+Offset]	x ≠ 3
x2 │	d	[BP+SI+Offset]	x ≠ 3
x3 │	d	[BP+DI+Offset]	x ≠ 3
x4 │	d	[SI+Offset]	x ≠ 3
x5 │	d	[DI+Offset]	x ≠ 3
x6 │	d	[BP+Offset]	x ≠ 0,3
x7 │	d	[BX+Offset]	x ≠ 3

k	│ x	Ax	Ex	Rx	Ix	movsx	cmpsx	stosx	lodsx	scasx	insx	outsx
────────┼────────────────────────────────────────────────────────────────────────────────────────────
0	│ b	AL	Eb	Rb	Ib	movsb	cmpsb	stosb	lodsb	scasb	insb	outsb
1	│ v	eAX	Ev	Rv	Iv	movsv	cmpsv	stosv	lodsv	scasv	insv	outsv
1 (16)	│ w	AX	Ew	Rw	Iw	movsw	cmpsw	stosw	lodsw	scasw	insw	outsw
1 (32)	│ d	EAX	Ed	Rd	Id	movsd	cmpsd	stosd	lodsd	scasd	insd	outsd

OpCode Encodings
────────────────
00ppp00k xrm d		Ap Ex,Rx	[P: 0=add,1=or,2=adc,3=sbb,4=and,5=sub,6=xor,7=cmp]
00ppp01k xrm d		Ap Rx,Ex	[P: 0=add,1=or,2=adc,3=sbb,4=and,5=sub,6=xor,7=cmp]
00ppp10k x		Ap Ax,Ix	[P: 0=add,1=or,2=adc,3=sbb,4=and,5=sub,6=xor,7=cmp]
000ss110		push Rs		[s ∈ [0,3]]
000ss111		pop Rs		[s ∈ [0,3]; s ≠ 1, 80186+]
00001111 000 x0m d	sldt Ew		[80???+]
00001111 000 x1m d	str Ew		[80???+]
00001111 000 x2m d	lldt Ew		[80???+]
00001111 000 x3m d	ltr Ew		[80???+]
00001111 000 x4m d	verr Ew		[80???+]
00001111 000 x5m d	verw Ew		[80???+]
00001111 001 x0m d	sgdt Es		[80???+]	(x ≠ 3)
00001111 001 x1m d	sidt Es		[80???+]	(x ≠ 3)
00001111 001 x2m d	lgdt Es		[80???+]	(x ≠ 3)
00001111 001 x3m d	lidt Es		[80???+]	(x ≠ 3)
00001111 001 x4m d	smsw Ev		[80???+]
00001111 001 x6m d	lmsw Ev		[80???+]
00001111 001 x7m d	invlpg E	[80???+]	(x ≠ 3)
00001111 001 371	rdtscp
00001111 002 xrm d	lar Rw,Ew	[80???+]
00001111 003 xrm d	lsl Rw,Ew	[80???+]
00001111 006		clts		[80???+]
00001111 010		invd		[80???+]
00001111 011		wbinvd		[80???+]
00001111 017		ud2		[80???+]
00001111 037 x0m d	nop R?		[80???+]
00001111 040 xer	mov R?,CRe	[e ≠ 5,6,7]	[80???+]
00001111 041 xer	mov R?,DRe	[80???+]
00001111 042 xer	mov CRe,R?	[e ≠ 1,5,6,7]	[80???+]
00001111 043 xer	mov DRe,R?	[80???+]
00001111 060		wrmsr
00001111 061		rdtsc
00001111 062		rdmsr
00001111 063		rdpmc
00001111 070 360 xrm d	movbe R?,E?	[80???+]
00001111 070 361 xrm d	movbe E?,R?	[80???+]
00001111 200+c v	jCC V		[80???+]
00001111 220+c xom	setCC E?	[80???+]
00001111 2s1		pop Rs		[80???+]	(s = 4,5)
00001111 242		cpuid		[80???+]
00001111 243 xrm d	bt Ew,Rw	[80???+]
00001111 244 xrm d b	shld E?,R?,B	[80???+]
00001111 245 xrm d	shld E?,R?,CL	[80???+]
00001111 252		rsm		[80???+]
00001111 253 xrm d	bts Ew,Rw	[80???+]
00001111 254 xrm d b	shrd E?,R?,B	[80???+]
00001111 255 xrm d	shrd E?,R?,CL	[80???+]
00001111 260+k xrm d	cmpxchg Ex,Rx	[80???+]
00001111 262 xrm d	lss Rw,E	[80???+]	(x ≠ 3)
00001111 263 xrm d	btr Ew,Rw	[80???+]
00001111 264 xrm d	lfs Rw,E	[80???+]	(x ≠ 3)
00001111 265 xrm d	lgs Rw,E	[80???+]	(x ≠ 3)
00001111 266+k xrm d	movzx Rx,Ex	[80???+]
00001111 272 x4m d b	bt Ew,B		[80???+]
00001111 272 x5m d b	bts Ew,B	[80???+]
00001111 272 x6m d b	btr Ew,B	[80???+]
00001111 272 x7m d b	btc Ew,B	[80???+]
00001111 273 xrm d	btc Ew,Rw	[80???+]
00001111 274 xrm d	bsf Ew,Rw	[80???+]
00001111 275 xrm d	bsr Ew,Rw	[80???+]
00001111 276+k xrm d	movsx Rx,Ex	[80???+]
00001111 300+k xrm d	xadd Ex,Rx	[80???+]
00001111 31r		bswap Rd	[80???+]
001ss110 		Rs:		[s ∈ [0,s]]
001pp111 		Dp
01ppprrr		Ip Rv
01100000		pusha		[80186+]
01100001		popa		[80186+]
01100010 xrm d		bound Rv,Ev	[80186+]	(x ≠ 3)
01100011 xrm d		arpl Ev,Rv	[80???+]
01100sss		Rs:		(s=4,5)
01100110 017 070 202 xrm d	invpcid Rd,M8	[80???+]
01100110		OP:		[80???+]
01100111		RAND:		[80???+]
01101000 w		push Iv		[80186+]
01101001 xrm d w	imul Rv,Ev,Iv	[80186+]
01101010 b		push Ib		[80186+]
01101011 xrm d b	imul Rv,Ev,Is	[80186+]
0110110k		insx		[80186+]
0110111k		outsx		[80186+]
0111cccc b		jCC Jb
1000000k xPm d x	Ap Ex,Ix	[P: 0=add,1=or,2=adc,3=sbb,4=and,5=sub,6=xor,7=cmp]
1000001k xPm d x	Ap Ex,Is	[P: 0=add,1=or,2=adc,3=sbb,4=and,5=sub,6=xor,7=cmp]
1000010k xrm d		test Rx,Ex
1000011k xrm d		xchg Rx,Ex
1000100k xrm d		mov Ex,Rx
1000101k xrm d		mov Rx,Ex
10001100 xsm d		mov Ev,Rs	(s ≠ 6,7)
10001101 xrm d		lea Rw,E	(x ≠ 3)
10001110 xsm d		mov Rs,Ev	(s ≠ 6,7)
10001111 x0m d		pop Ev
10010000		nop		( = xch eAX, eAX)
10010rrr 		xchg Rv,eAX
10011000		cbw
10011001		cwd
10011010 d		call far F
10011011		wait
100111pp		Fp
1010000k x		mov Ax,Ox
1010001k x		mov Ox,Ax
1010010k		movsx
1010011k		cmpsx
1010100k x		test Ax,Ix
1010101k		stosx
1010110k		lodsx
1010111k		scasx
10110rrk x		mov Rx,Ix
1100000k xPm d	Sp Ex,Ix	(P ≠ 6) [80186+]
11000010 v		ret Iv
11000011		ret
11000100 xrm d		les Rv,E	(x ≠ 3)
11000101 xrm d		lds Rv,E	(x ≠ 3)
1100011k x0m d x	mov Ex,Ix
11001000		enter		[80186+]
11001001		leave		[80186+]
11001010 v		retf Iv
11001011		retf
11001100		int 3
11001101 b		int Ib
11001110		into
11001111		iret
1101000k xPm d		Sp Ex,1		(P ≠ 6)
1101001k xPm d		Sp Ex,CL	(P ≠ 6)
11010100 b		aam Ib		(Officially: Ib = 0a, only)
11010101 b		aad Ib		(Officially: Ib = 0a, only)
11010110		salc		[8086/8088-]
11010111		xlat
11011ddd xrm d		ESC D xrm
11100ppp b		Lp Jb
1110010k b		in Ax,Ib
1110011k b		out Ib,Ax
11101000 v		call near Jv
11101001 v		jmp near Jv
11101010 d		jmp far Af
11101011 b		jmp short Jb
1110110k		in Ax,DX
1110111k		out DX,Ax
11110000		lock
11110001		―――
11110010 1010011k	repnz cmpsx
11110010 1010111k	repnz scasx
11110011 1010011k	repz cmpsx
11110011 1010111k	repz scasx
11110011 0110110k	rep insx		[80186+]
11110011 0110111k	rep outsx		[80186+]
11110011 1010010k	rep movsx
11110011 1010101k	rep stosx
11110011 1010111k	rep lodsx
11110100		hlt
11110101		cmc
1111011k x0m d x	test Ex,Ix
1111011k x1m d x	test Ex,Ix
1111011k xPm d		Up Ex		(P ≠ 0,1)
11111ppp		Bp
1111110k x0m d		inc Ex
1111110k x1m d		dec Ex
11111100 xPm d		―――		(P = 0,1)
11111111 x2m d		call near En
11111111 x3m d		call far Ef	(x ≠ 3)
11111111 x4m d		jmp near En
11111111 x5m d		jmp far Ef
11111111 x6m d		push Ew
